import "../../../css/ui/AudioPlayer.css";

function AudioPlayer(audioSrc) {
  const player = document.createElement("div");
  player.id = "audio-player-container";

  // Poster image
  const img = document.createElement("img");
  img.src = audioSrc.poster;
  img.alt = "Audio Thumbnail";
  img.className = "audio-poster";

  // Audio element
  const audio = document.createElement("audio");
  audio.src = audioSrc.src;
  audio.controls = false;

  // === CONTROLS CONTAINER ===
  const controlsContainer = document.createElement("div");
  controlsContainer.className = "controls-container";

  const playButton = document.createElement("button");
  playButton.textContent = "Play";
  playButton.onclick = function () {
      if (audio.paused) {
          audio.play();
          playButton.textContent = "Pause";
      } else {
          audio.pause();
          playButton.textContent = "Play";
      }
  };

  const seekBar = document.createElement("input");
  seekBar.type = "range";
  seekBar.min = 0;
  seekBar.max = 100;
  seekBar.value = 0;
  seekBar.className = "seek-bar";

  audio.addEventListener("timeupdate", () => {
      seekBar.value = (audio.currentTime / audio.duration) * 100;
  });

  seekBar.addEventListener("input", () => {
      audio.currentTime = (seekBar.value / 100) * audio.duration;
  });

  const volumeSlider = document.createElement("input");
  volumeSlider.type = "range";
  volumeSlider.min = 0;
  volumeSlider.max = 1;
  volumeSlider.step = 0.1;
  volumeSlider.value = audio.volume;
  volumeSlider.className = "volume-slider";

  volumeSlider.addEventListener("input", () => {
      audio.volume = volumeSlider.value;
  });

  const speedSelect = document.createElement("select");
  [0.5, 1, 1.5, 2].forEach(speed => {
      const option = document.createElement("option");
      option.value = speed;
      option.textContent = `${speed}x`;
      speedSelect.appendChild(option);
  });
  speedSelect.className = "speed-select";
  speedSelect.addEventListener("change", () => {
      audio.playbackRate = speedSelect.value;
  });

  // Add controls to container
  controlsContainer.appendChild(playButton);
  controlsContainer.appendChild(seekBar);
  controlsContainer.appendChild(volumeSlider);
  controlsContainer.appendChild(speedSelect);

  // === LYRICS CONTAINER ===
  const lyricsContainer = document.createElement("div");
  lyricsContainer.id = "lyrics-container";

  audioSrc.lyricsData.forEach(lyric => {
      const lyricElement = document.createElement("p");
      lyricElement.textContent = lyric.text;
      lyricElement.dataset.time = lyric.time;
      lyricsContainer.appendChild(lyricElement);
  });

  function updateLyrics() {
      const currentTime = audio.currentTime;
      const lyricsElements = lyricsContainer.querySelectorAll("p");

      lyricsElements.forEach((lyricElement) => {
          const time = parseFloat(lyricElement.dataset.time);
          if (currentTime >= time) {
              lyricsElements.forEach(el => el.classList.remove("active"));
              lyricElement.classList.add("active");
          }
      });

      const activeLyric = lyricsContainer.querySelector(".active");
      if (activeLyric) {
          activeLyric.scrollIntoView({ behavior: "smooth", block: "center" });
      }
  }

  audio.addEventListener("timeupdate", updateLyrics);

  // === APPEND ELEMENTS ===
  player.appendChild(img);
  player.appendChild(audio);
  player.appendChild(controlsContainer);
  player.appendChild(lyricsContainer);
    // === DARK MODE TOGGLE ===
    const themeToggle = document.createElement("button");
    themeToggle.textContent = "🌙 Dark Mode";
    themeToggle.className = "theme-toggle";
    themeToggle.onclick = () => {
        player.classList.toggle("dark-mode");
        themeToggle.textContent = player.classList.contains("dark-mode") ? "☀️ Light Mode" : "🌙 Dark Mode";
    };

    // === MINI-PLAYER TOGGLE ===
    const miniToggle = document.createElement("button");
    miniToggle.textContent = "🔽 Mini Player";
    miniToggle.className = "mini-toggle";
    miniToggle.onclick = () => {
        player.classList.toggle("mini-mode");
        miniToggle.textContent = player.classList.contains("mini-mode") ? "🔼 Expand" : "🔽 Mini Player";
    };

    // Add toggles to a toggle container
    const toggleControls = document.createElement("div");
    toggleControls.className = "toggle-controls";
    toggleControls.appendChild(themeToggle);
    toggleControls.appendChild(miniToggle);

    // Append to player
    player.appendChild(toggleControls);
    
  return player;
}

export default AudioPlayer;
export {AudioPlayer};