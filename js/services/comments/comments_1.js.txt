import { apiFetch } from "../../api/api.js";
import { reportPost } from "../reporting/reporting.js";

// export function createCommentsSection(postId, comments = [], entityType, entityId) {
//     const container = document.createElement("div");
//     container.className = "comments-section";

//     const list = document.createElement("div");
//     list.className = "comments-list";
//     container.appendChild(list);

//     const form = createCommentForm(postId, entityType, entityId, newComment => {
//         addCommentToDOM(list, newComment, entityType, entityId);
//     });

//     container.appendChild(form);

//     // Load initial comments
//     comments.forEach(comment => addCommentToDOM(list, comment, entityType, entityId));

//     return container;
// }

export function createCommentsSection(postId, comments = [], entityType, entityId) {
    const container = document.createElement("div");
    container.className = "comments-section";

    const list = document.createElement("div");
    list.className = "comments-list";
    container.appendChild(list);

    // Add the load comments button
    const loadSpan = createLoadCommentsSpan(entityType, entityId, list);
    container.appendChild(loadSpan);

    // Add comment form
    const form = createCommentForm(postId, entityType, entityId, newComment => {
        addCommentToDOM(list, newComment, entityType, entityId);
    });
    container.appendChild(form);

    // If initial comments are passed (e.g., for SSR/preloaded content)
    comments.forEach(comment => addCommentToDOM(list, comment, entityType, entityId));

    return container;
}

function createCommentForm(postId, entityType, entityId, onCommentAdded) {
    const form = document.createElement("form");
    form.className = "comment-form";

    const input = document.createElement("input");
    input.type = "text";
    input.placeholder = "Write a comment...";
    input.required = true;

    const submit = document.createElement("button");
    submit.type = "submit";
    submit.textContent = "Post";

    form.appendChild(input);
    form.appendChild(submit);

    form.addEventListener("submit", async e => {
        e.preventDefault();
        const content = input.value.trim();
        if (!content) return;

        try {
            const newComment = await apiFetch(
                `/comments/${entityType}/${entityId}`,
                "POST",
                JSON.stringify({ content })
            );
            input.value = "";
            onCommentAdded(newComment);
        } catch (err) {
            console.error("Failed to post comment", err);
        }
    });

    return form;
}

function addCommentToDOM(container, comment, entityType, entityId) {
    const wrapper = document.createElement("div");
    wrapper.className = "comment";
    wrapper.dataset.commentId = comment._id;

    const text = document.createElement("span");
    text.textContent = comment.content;

    const editBtn = document.createElement("button");
    editBtn.textContent = "Edit";
    editBtn.className = "edit-comment";
    editBtn.type = "button";

    const deleteBtn = document.createElement("button");
    deleteBtn.textContent = "Delete";
    deleteBtn.className = "delete-comment";
    deleteBtn.type = "button";

    const reportBtn = document.createElement("button");
    reportBtn.textContent = "Report";
    reportBtn.className = "report-comment";
    reportBtn.type = "button";

    editBtn.addEventListener("click", () =>
        handleEditComment(wrapper, comment, entityType, entityId)
    );
    deleteBtn.addEventListener("click", () =>
        handleDeleteComment(wrapper, comment._id, entityType, entityId)
    );
    reportBtn.addEventListener("click", () =>
        handleReportComment(wrapper, comment._id, entityType, entityId)
    );

    wrapper.appendChild(text);
    wrapper.appendChild(editBtn);
    wrapper.appendChild(deleteBtn);
    wrapper.appendChild(reportBtn);

    container.appendChild(wrapper);
}

async function handleEditComment(wrapper, comment, entityType, entityId) {
    const input = document.createElement("input");
    input.type = "text";
    input.value = comment.content;

    const saveBtn = document.createElement("button");
    saveBtn.textContent = "Save";
    saveBtn.type = "button";

    wrapper.innerHTML = "";
    wrapper.appendChild(input);
    wrapper.appendChild(saveBtn);

    saveBtn.addEventListener("click", async () => {
        const newContent = input.value.trim();
        if (!newContent) return;

        try {
            const updatedComment = await apiFetch(
                `/comments/${entityType}/${entityId}/${comment._id}`,
                "PUT",
                JSON.stringify({ content: newContent })
            );
            comment.content = updatedComment.content;

            // Replace the current wrapper with a fresh comment DOM
            const parent = wrapper.parentElement;
            wrapper.remove();
            addCommentToDOM(parent, comment, entityType, entityId);
        } catch (err) {
            console.error("Failed to update comment", err);
        }
    });
}

async function handleReportComment(commentId, entityType, entityId) {
    reportPost(commentId, "comment", entityType, entityId);
}

async function handleDeleteComment(wrapper, commentId, entityType, entityId) {
    try {
        await apiFetch(`/comments/${entityType}/${entityId}/${commentId}`, "DELETE");
        wrapper.remove();
    } catch (err) {
        console.error("Failed to delete comment", err);
    }
}

function createLoadCommentsSpan(entityType, entityId, listContainer) {
    const span = document.createElement("span");
    span.textContent = "Load Comments";
    span.className = "load-comments";
    span.style.cursor = "pointer";
    span.style.color = "blue";
    span.style.textDecoration = "underline";

    let loaded = false;

    span.addEventListener("click", async () => {
        if (loaded) return; // Prevent re-fetching
        try {
            const comments = await apiFetch(`/comments/${entityType}/${entityId}`, "GET");
            comments.forEach(comment => {
                addCommentToDOM(listContainer, comment, entityType, entityId);
            });
            loaded = true;
            span.remove(); // Remove the span after loading once
        } catch (err) {
            console.error("Failed to load comments", err);
            span.textContent = "Failed to load. Retry?";
        }
    });

    return span;
}

// // comments.js

// import { apiFetch } from "../../api/api.js";
// // import { reportPost } from "../reporting/reporting.js";

// //         // Report button
// //         const reportButton = document.createElement("button");
// //         reportButton.className = "report-btn";
// //         reportButton.textContent = "Report";
// //         reportButton.addEventListener("click", () => {
// //             reportPost(msg.message_id);
// //         });

// export function createCommentsSection(postId, comments = [], entityType, entityId) {
//     const container = document.createElement("div");
//     container.className = "comments-section";

//     const list = document.createElement("div");
//     list.className = "comments-list";
//     container.appendChild(list);

//     const form = createCommentForm(postId, newComment => {
//         addCommentToDOM(list, newComment, entityType, entityId);
//     });

//     container.appendChild(form);

//     // Load initial comments
//     comments.forEach(comment => addCommentToDOM(list, comment, entityType, entityId));

//     return container;
// }

// function createCommentForm(postId, onCommentAdded, entityType, entityId) {
//     const form = document.createElement("form");
//     form.className = "comment-form";

//     const input = document.createElement("input");
//     input.type = "text";
//     input.placeholder = "Write a comment...";
//     input.required = true;

//     const submit = document.createElement("button");
//     submit.type = "submit";
//     submit.textContent = "Post";

//     form.appendChild(input);
//     form.appendChild(submit);

//     form.addEventListener("submit", async e => {
//         e.preventDefault();
//         const content = input.value.trim();
//         if (!content) return;

//         try {
//             // const res = await apiFetch(`/posts/${postId}/comments`, "POST", JSON.stringify({ content })
//             const res = await apiFetch(`/comments/${entityType}/${entityId}`, "POST", JSON.stringify({ content })
//             );
//             const data = await res.json();
//             input.value = "";
//             onCommentAdded(data);
//         } catch (err) {
//             console.error("Failed to post comment", err);
//         }
//     });

//     return form;
// }

// function addCommentToDOM(container, comment, entityType, entityId) {
//     const wrapper = document.createElement("div");
//     wrapper.className = "comment";
//     wrapper.dataset.commentId = comment._id;

//     const text = document.createElement("span");
//     text.textContent = comment.content;

//     const editBtn = document.createElement("button");
//     editBtn.textContent = "Edit";
//     editBtn.className = "edit-comment";

//     const deleteBtn = document.createElement("button");
//     deleteBtn.textContent = "Delete";
//     deleteBtn.className = "delete-comment";

//     editBtn.addEventListener("click", () => handleEditComment(wrapper, comment, entityType, entityId));
//     deleteBtn.addEventListener("click", () => handleDeleteComment(wrapper, comment._id, entityType, entityId));

//     wrapper.appendChild(text);
//     wrapper.appendChild(editBtn);
//     wrapper.appendChild(deleteBtn);

//     container.appendChild(wrapper);
// }

// async function handleEditComment(wrapper, comment, entityType, entityId) {
//     const input = document.createElement("input");
//     input.type = "text";
//     input.value = comment.content;

//     const saveBtn = document.createElement("button");
//     saveBtn.textContent = "Save";

//     wrapper.innerHTML = "";
//     wrapper.appendChild(input);
//     wrapper.appendChild(saveBtn);

//     saveBtn.addEventListener("click", async () => {
//         const newContent = input.value.trim();
//         if (!newContent) return;

//         try {
//             const res = await apiFetch(`/comments/${entityType}/${entityId}/${comment._id}`, "PUT", JSON.stringify({ content: newContent }));
//             const data = await res.json();
//             comment.content = data.content;

//             wrapper.innerHTML = "";
//             addCommentToDOM(wrapper.parentElement, comment);
//             wrapper.remove(); // Remove old wrapper
//         } catch (err) {
//             console.error("Failed to update comment", err);
//         }
//     });
// }

// async function handleDeleteComment(wrapper, commentId, entityType, entityId) {
//     try {
//         await apiFetch(`/comments/${entityType}/${entityId}/${commentId}`, "DELETE");
//         wrapper.remove();
//     } catch (err) {
//         console.error("Failed to delete comment", err);
//     }
// }
