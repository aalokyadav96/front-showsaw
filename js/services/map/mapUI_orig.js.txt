import { createElement } from "../../components/createElement.js";
import { apiFetch } from "../../api/api.js";
import displayPlace from "../place/displayPlace.js";

export function displayMap(contentContainer, isLoggedIn, mapimage) {
  contentContainer.innerHTML = "";

  const spritePositions = {
    petrol: "0px 0px",
    shop: "0px -32px",
    hospital: "0px -64px",
    police: "0px -96px",
    restaurant: "0px -128px",
  };

  const legendDescriptions = {
    petrol: "Petrol Pumps: Refuel your vehicle here.",
    shop: "Shops: Buy items, ammo, or snacks.",
    hospital: "Hospitals: Restore your health after taking damage.",
    police: "Police Stations: Law enforcement hubs. Avoid if wanted!",
    restaurant: "Restaurants: Restore health & hunger.",
  };

  const mapInner = createElement("img", { id: "map-inner", src: mapimage });

  const markerLayer = createElement("div", {
    style: "position:absolute;top:0;left:0;width:100%;height:100%",
  });

  const mapWrapper = createElement("div", { id: "map-wrapper" }, [
    mapInner,
    markerLayer,
  ]);

  const mapContainer = createElement("div", { id: "custom-map-container" }, [
    mapWrapper,
  ]);

  contentContainer.appendChild(mapContainer);

  const legend = createElement("div", { id: "legend", class: "hidden" });

  const types = Object.keys(spritePositions);
  types.forEach((type) => {
    const btn = createElement("button", { "data-type": type }, [
      {
        petrol: "⛽ Petrol Pump",
        shop: "🏪 Shop",
        hospital: "🏥 Hospital",
        police: "🚓 Police",
        restaurant: "🍔 Restaurant",
      }[type],
    ]);
    legend.appendChild(btn);
  });

  const resetBtn = createElement(
    "button",
    { style: "margin-top:10px" },
    ["🔄 Show All"]
  );
  legend.appendChild(resetBtn);
  contentContainer.appendChild(legend);

  const zoomControls = createElement("div", { id: "zoom-controls" }, [
    createElement("button", {}, ["+"]),
    createElement("button", {}, ["−"]),
  ]);
  contentContainer.appendChild(zoomControls);

  const minimapImage = createElement("img", { src: mapimage });
  const minimapViewport = createElement("div", { id: "minimap-viewport" });

  const minimap = createElement("div", { id: "minimap" }, [
    minimapImage,
    minimapViewport,
  ]);
  contentContainer.appendChild(minimap);

  const infoTitle = createElement("h2", { id: "info-title" }, ["Info"]);
  const infoContent = createElement("p", { id: "info-content" }, [
    "Details will go here",
  ]);
  const closeBtn = createElement("button", { id: "close-info-panel" }, [
    "Close",
  ]);
  const infoPanel = createElement("div", { id: "marker-info-panel" }, [
    closeBtn,
    infoTitle,
    infoContent,
  ]);
  contentContainer.appendChild(infoPanel);

  const markers = [
    { type: "petrol", name: "Pump 1", x: 100, y: 100, id: "AI6tul8sOvWCaC" },
    { type: "shop", name: "Shop 1", x: 400, y: 550, id: "654" },
    { type: "petrol", name: "Pump 2", x: 100, y: 750, id: "456" },
    { type: "hospital", name: "Hospital", x: 800, y: 600, id: "645" },
    { type: "police", name: "Police Station", x: 600, y: 600, id: "456" },
    { type: "restaurant", name: "Burger Place", x: 700, y: 450, id: "456" },
  ];

  const markerElements = [];

  markers.forEach((marker) => {
    const label = createElement("div", { class: "marker-label" }, [
      marker.name,
    ]);
    const el = createElement(
      "div",
      {
        class: "marker",
        id: marker.id,
        title: marker.name,
        "data-type": marker.type,
        style: `
          left:${marker.x}px;
          top:${marker.y}px;
          background-position:${spritePositions[marker.type] || "0px 0px"};
        `,
      },
      [label]
    );
    markerLayer.appendChild(el);
    markerElements.push(el);
  });

  let isDragging = false;
  let startX = 0;
  let startY = 0;
  let mapX = 0;
  let mapY = 0;
  let zoom = 1;
  const zoomStep = 0.1;

  function applyZoom() {
    mapWrapper.style.transform = `translate(${mapX}px, ${mapY}px) scale(${zoom})`;
    updateMinimapViewport();
  }

  function updateMinimapViewport() {
    const mapImgWidth = mapInner.naturalWidth || 2000;
    const minimapScale = minimap.offsetWidth / mapImgWidth;
    const visibleWidth = mapContainer.offsetWidth / zoom;
    const visibleHeight = mapContainer.offsetHeight / zoom;

    minimapViewport.style.width = `${visibleWidth * minimapScale}px`;
    minimapViewport.style.height = `${visibleHeight * minimapScale}px`;
    minimapViewport.style.left = `${-mapX * minimapScale}px`;
    minimapViewport.style.top = `${-mapY * minimapScale}px`;
  }

  mapContainer.addEventListener("mousedown", (e) => {
    isDragging = true;
    startX = e.clientX;
    startY = e.clientY;
    mapContainer.style.cursor = "grabbing";
  });

  document.addEventListener("mousemove", (e) => {
    if (!isDragging) return;
    const dx = e.clientX - startX;
    const dy = e.clientY - startY;
    mapX += dx;
    mapY += dy;
    applyZoom();
    startX = e.clientX;
    startY = e.clientY;
  });

  document.addEventListener("mouseup", () => {
    isDragging = false;
    mapContainer.style.cursor = "grab";
  });

  const [zoomInBtn, zoomOutBtn] = zoomControls.querySelectorAll("button");
  zoomInBtn.addEventListener("click", () => {
    zoom += zoomStep;
    applyZoom();
  });

  zoomOutBtn.addEventListener("click", () => {
    zoom = Math.max(0.5, zoom - zoomStep);
    applyZoom();
  });

  document.addEventListener("keydown", (e) => {
    if (e.key.toLowerCase() === "l") {
      legend.classList.toggle("hidden");
    }
  });

  legend.querySelectorAll("button[data-type]").forEach((btn) => {
    btn.addEventListener("click", () => {
      const type = btn.getAttribute("data-type");
      markerElements.forEach((el) => {
        el.style.display = el.dataset.type === type ? "block" : "none";
      });
    });
  });

  resetBtn.addEventListener("click", () => {
    markerElements.forEach((el) => {
      el.style.display = "block";
    });
  });

  // markerElements.forEach((el) => {
  //   el.addEventListener("click", (e) => {
  //     e.stopPropagation();
  //     const type = el.dataset.type;
  //     const description = legendDescriptions[type] || "No info available.";
  //     infoTitle.textContent = el.title;
  //     infoContent.textContent = description;
  //     infoPanel.classList.add("active");
  //   });
  // });

  markerElements.forEach((el) => {
    el.addEventListener("click", async (e) => {
      e.stopPropagation();
      const placeName = el.title;
      infoTitle.textContent = placeName;
      infoContent.textContent = "Loading...";
  
      try {
        // const response = await apiFetch(`/places/place-details?id=${encodeURIComponent(el.id)}`);
        // if (!response.ok) throw new Error("Failed to fetch place details");
  
        // const data = await response.json();
        // const data = await response;
        displayPlace(isLoggedIn, el.id, infoContent);
        // infoContent.textContent = data.description || "No description provided.";
      } catch (error) {
        console.error(error);
        infoContent.textContent = "Error loading details.";
      }
  
      infoPanel.classList.add("active");
    });
  });
  

  minimap.addEventListener("click", (e) => {
    const rect = minimap.getBoundingClientRect();
    const clickX = e.clientX - rect.left;
    const clickY = e.clientY - rect.top;
    const mapImgWidth = mapInner.naturalWidth || 2000;
    const minimapScale = minimap.offsetWidth / mapImgWidth;
    const targetX = clickX / minimapScale;
    const targetY = clickY / minimapScale;
    const containerCenterX = mapContainer.offsetWidth / 2;
    const containerCenterY = mapContainer.offsetHeight / 2;
    mapX = containerCenterX - targetX * zoom;
    mapY = containerCenterY - targetY * zoom;
    applyZoom();
  });

  closeBtn.addEventListener("click", () => {
    infoPanel.classList.remove("active");
  });

  applyZoom();
}
